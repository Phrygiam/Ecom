0 - install ES7 extension (for snippets)

1 - move gitignore file in the root folder(proshop)

2 - add .env under the voice "misc" in the gitignore file

3 - go in the root (proshop) and type:
     del git    // deletes any pre-installed git repository
     git init   // initializes our repository
     git add .  // add everything
     git status // to visualize anything in our staging area
     git commit -m "React setup"  // push to the local repository with a message

4 - go to bootswatch and download any theme (we used Lux), move it to the src folder
    then load it in index.js

5 - install react boostrap in the frontend folder (npm i react-bootstrap)

6 - go to cdnjs.com and grab the link for font awesome, then add id to the public folder
    in index.html

7 - Install React Router with: npm i react-router-dom
    It is to be imported in App.js

8 - Install React Router Boostrap with npm i react-router-bootstrap

9 - Initialize a package.json in the root folder (proshop)

10 - Install express in the root folder

11 - Change the script in the package.json to "start": "node backend/server" to initialize it with npm start

12 - Add this voice in the package.json : "proxy": "http://localhost:5000"

13 - Install nodemon and concurrently in the root folder as dev dependencies
     npm i -D nodemon concurrently

14 - Add a script in the package.json: "server": "nodemon backend/server",
     then type "npm run server" in the root folder

15 - Add another script to run the frontend in the root folder:
    "client": "npm start --prefix frontend",
    then type "npm run client" in the root folder

16 - Add the last script with escape quotes:
     "dev": "concurrently \"npm run server\" "\npm run client\""
     then type "npm run dev" in the root folder

17 - Install cors in the root directory, in which we create a.env file with:
     NODE_ENV = development
     PORT = 5000

18 - Install mongoose in the root directory, then go in the backend folder
     and create a config folder with a db.js file

19 - Install bcryt in the root folder: npm i bcryptjs

20 - create a seeder.js file in the backend folder. Its not part of the project and is used to import/export data
     and is usually deleted after running it

21 - Install an error handler in the root directory (to be used as middleware):
     npm i express-async-handler

22 - Go in the frontend folder and install redux and redux-toolkit:
     npm install react-redux @reduxjs/toolkit

23 - IMPORTANT: in productScreen (the page that renders the item an user can buy), we use ReactRoute's history API

     function ProductScreen({history, match}) {
          const addToCartHandler = () => {
               history.push(`/cart/${match.params.id}?qty=${quantity}`)
          }
     }

     Basically, if we assign this function to a button, once we click it it redirects us to the cart page
     with the selected item's quantity

24 - When we write the RouteCart <Route path ='/cart/:id?' component = {CartScreen} />
     we put a question mark after id, which means "id is not necessary" since we want
     the page to be visitable even without an id into the url

25 - Install jsonwebtoken in the root folder:
     npm i jsonwebtoken

26 - When we create a sandbox with paypal, select a business acount and grab the userID. Put it into the env file as:
     PAYPAL_CLIENT_ID

27 - Go to the backend and write the paypal route in the server.js file

28 - Look for "sdk paypal script" in the browser. In the OrderScreen.js (frontend) we will dynamically generate it
     once the page is loaded through the use of useEffect()

29 - Go to the frontend folder and type "npm i react-paypal-button-v2"

30 - Go to the root folder and: "npm i i multer"

31 - Go to the root folder and: "npm i i morgan", then create a route in the server.js file

32 - Go to the frontend folder and "npm i react-helmet"

33 - Before deploying, remember to check files in .gitignore, especially /frontend/build, /nodemodules and .env
     In the cmd terminal, "type heroku login", go to the project's root folder (C:\Users/Giammarco/Desktop/proshop) and type "heroku create naoss electronics"
     In the root folder create a "Procfile"(it will have the heroku icon). Inside the file, write "web: node backend/server.js"
     to to package.json and write this script:
     "heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --prefix frontend && npm run build --prefix frontend"
     Go in the root and type:
      git add .
      git commit -m "Prepare for deployment"
     Go to Heroku, in deploy page find "geroku git:remote -a naoss electronics" and past it in the root
      git push heroku main

